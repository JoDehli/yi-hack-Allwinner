diff -Naur alsa-lib-1.1.4.1.ori/src/pcm/pcm.c alsa-lib-1.1.4.1/src/pcm/pcm.c
--- alsa-lib-1.1.4.1.ori/src/pcm/pcm.c	2021-04-12 22:25:33.920751801 +0200
+++ alsa-lib-1.1.4.1/src/pcm/pcm.c	2021-04-12 22:22:38.000000000 +0200
@@ -645,6 +645,8 @@
 \example ../../test/latency.c
 */
 
+#define _GNU_SOURCE
+
 #include <stdio.h>
 #include <string.h>
 #include <malloc.h>
@@ -656,6 +658,18 @@
 #include <limits.h>
 #include "pcm_local.h"
 
+/* Start - Handle for the pipe that will be used to clone the audio frames. */
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <pthread.h>
+#include "pcm_fifo.h"
+#define FIFO_CONVERT_TO_8KHZ
+//#define FIFO_REMOVE_BLANK
+int fifo_snoop_fd = 0;
+int fifo_snoop_fd_in = 0;
+u_int8_t fifo_buf[FIFO_BUFFER_SIZE];
+/* End - Handle for the pipe that will be used to clone the audio frames. */
+
 #ifndef DOC_HIDDEN
 #define P_STATE(x)	(1U << SND_PCM_STATE_ ## x)
 #define P_STATE_RUNNABLE (P_STATE(PREPARED) | \
@@ -737,12 +751,22 @@
 		snd_async_handler_t *h = list_entry(pcm->async_handlers.next, snd_async_handler_t, hlist);
 		snd_async_del_handler(h);
 	}
+
+	if (pcm->stream == SND_PCM_STREAM_CAPTURE) {
+		if (fifo_snoop_fd > 0)
+			close(fifo_snoop_fd);
+	} else if (pcm->stream == SND_PCM_STREAM_PLAYBACK) {
+		if (fifo_snoop_fd_in > 0)
+			close(fifo_snoop_fd_in);
+	}
+
 	err = pcm->ops->close(pcm->op_arg);
 	if (err < 0)
 		res = err;
 	err = snd_pcm_free(pcm);
 	if (err < 0)
 		res = err;
+
 	return res;
 }	
 
@@ -1509,6 +1533,12 @@
 	}
 	if (bad_pcm_state(pcm, P_STATE_RUNNABLE))
 		return -EBADFD;
+
+	if ((fifo_snoop_fd != 0) && (strcmp("default", pcm->name) == 0)) {
+		/* Write to fifo, ignore the result */
+		pcm_write_snoop_fifo(pcm, (void *) buffer, size);
+	}
+
 	return _snd_pcm_readi(pcm, buffer, size);
 }
 
@@ -2509,6 +2539,37 @@
 		err = snd_pcm_open_conf(pcmp, name, root, pcm_conf, stream, mode);
 	}
 	snd_config_delete(pcm_conf);
+
+	if (stream == SND_PCM_STREAM_CAPTURE) {
+		if (strcmp("default", (*pcmp)->name) == 0) {
+			if (fifo_snoop_fd > 0) {
+				close(fifo_snoop_fd);
+				fifo_snoop_fd = 0;
+			}
+			if (access("/tmp/audio_fifo.requested", F_OK ) == 0 ) {
+				SNDMSG("Create snoop fifo for capture device %s\n", (*pcmp)->name);
+				if (pcm_create_snoop_fifo(*pcmp) != 0)
+				{
+					SNDERR("cannot create snoop fifo");
+				}
+				/* Hopefully nobody uses this one */
+				signal(SIGPIPE, SIG_IGN);
+			}
+		}
+	} else if (stream == SND_PCM_STREAM_PLAYBACK) {
+		if ((fifo_snoop_fd_in == 0) && (strcmp("hw:1,0", (*pcmp)->name) == 0)) {
+			if (access("/tmp/audio_in_fifo.requested", F_OK ) == 0 ) {
+				SNDMSG("Create snoop fifo for playback device %s\n", (*pcmp)->name);
+				if (pcm_create_snoop_fifo_in(*pcmp) != 0)
+				{
+					SNDERR("cannot create snoop fifo");
+				}
+				/* Hopefully nobody uses this one */
+				signal(SIGPIPE, SIG_IGN);
+			}
+		}
+	}
+
 	return err;
 }
 
@@ -8562,3 +8623,265 @@
 	return INTERNAL(snd_pcm_hw_params_get_period_size)(&params, period_size,
 							   NULL);
 }
+
+void* fifo_open_r_thread(void *data)
+{
+    int fd;
+    char *fifo_name = data;
+
+    fd = open(fifo_name, O_RDONLY);
+    usleep(250);
+    close(fd);
+
+    return NULL;
+}
+
+void* fifo_open_w_thread(void *data)
+{
+    int fd;
+    char *fifo_name = data;
+
+    fd = open(fifo_name, O_WRONLY);
+    usleep(250);
+    close(fd);
+
+    return NULL;
+}
+
+static int xrun_recovery(snd_pcm_t *handle, int err)
+{
+    if (err == -EPIPE) {    /* under-run */
+        err = snd_pcm_prepare(handle);
+        if (err < 0)
+            SNDERR("Can't recover from underrun, prepare failed: %s\n", snd_strerror(err));
+        return 0;
+    } else if (err == -ESTRPIPE) {
+        while ((err = snd_pcm_resume(handle)) == -EAGAIN)
+            sleep(1);   /* wait until the suspend flag is released */
+        if (err < 0) {
+            err = snd_pcm_prepare(handle);
+            if (err < 0)
+                SNDERR("Can't recover from suspend, prepare failed: %s\n", snd_strerror(err));
+        }
+        return 0;
+    }
+    return err;
+}
+
+void* fifo_read_thread(void *data)
+{
+    snd_pcm_t *ppcm = (snd_pcm_t *) data;
+    int num, prev_num, err;
+
+    pthread_detach(pthread_self());
+
+    // Read audio from fifo: 1024 samples, 16 bits, mono = 2048 bytes
+    // 1024 samples @ 16 KHz = 64 ms
+    unsigned char snoop_in_buffer[FIFO_BUFFER_SIZE];
+
+    while (1) {
+        // Read from fifo
+        num = pcm_read_snoop_fifo(ppcm, snoop_in_buffer, FIFO_BUFFER_SIZE);
+        if (num < 0) {
+            usleep(10000);
+        } else if (num == 0) {
+            if (prev_num > 0) {
+                err = snd_pcm_drain(ppcm);
+                if (err < 0) {
+                    SNDERR("snd_pcm_drain failed: %s\n", snd_strerror(err));
+                }
+                snd_pcm_prepare(ppcm);
+                if (err < 0) {
+                    SNDERR("snd_pcm_prepare failed: %s\n", snd_strerror(err));
+                }
+            }
+            prev_num = num;
+            usleep(10000);
+        } else {
+            // Start a new stream
+            if (prev_num == 0) {
+                if (snd_pcm_state(ppcm) == SND_PCM_STATE_PREPARED) {
+                    err = snd_pcm_start(ppcm);
+                    if(err == -EPIPE) {
+                        err = snd_pcm_prepare(ppcm);
+                        if (err < 0) {
+                            SNDERR("Start-prepare error: %s\n", snd_strerror(err));
+                            continue;
+                        }
+                    } else if (err < 0) {
+                        SNDERR("Start error: %s\n", snd_strerror(err));
+                        continue;
+                    }
+                } else if (snd_pcm_state(ppcm) == SND_PCM_STATE_XRUN) {
+                    err = snd_pcm_prepare(ppcm);
+                    if (err < 0) {
+                        SNDERR("Can't recovery from xrun, prepare failed: %s\n", snd_strerror(err));
+                        continue;
+                    }
+                }
+            }
+
+            if (num < FIFO_BUFFER_SIZE) {
+                memset(snoop_in_buffer + num, '\0', FIFO_BUFFER_SIZE - num);
+                num = FIFO_BUFFER_SIZE;
+            }
+            snd_pcm_wait(ppcm, 70);
+            err = snd_pcm_writei(ppcm, snoop_in_buffer, snd_pcm_bytes_to_frames(ppcm, num));
+            if (err == -EAGAIN)
+                continue;
+            if (err < 0) {
+                if (xrun_recovery(ppcm, err) < 0) {
+                    SNDERR("Write error: %s\n", snd_strerror(err));
+                    continue;
+                }
+                continue;
+            }
+
+            prev_num = num;
+        }
+    }
+
+    return NULL;
+}
+
+int pcm_create_snoop_fifo(snd_pcm_t *pcm)
+{
+    char *fifo = "/tmp/audio_fifo";
+    pthread_t open_thread;
+
+    if (mkfifo(fifo, 0666) < 0) {
+        if (errno != EEXIST) {
+            SNDERR("cannot create snoop fifo");
+            return -1;
+        }
+    }
+
+    if(pthread_create(&open_thread, NULL, fifo_open_r_thread, (void *) fifo)) {
+        SNDERR("error creating thread\n");
+        return -1;
+    }
+
+    fifo_snoop_fd = open(fifo, O_WRONLY);
+    if (fifo_snoop_fd <= 0) {
+        SNDERR("cannot open snoop fifo");
+        return -1;
+    }
+
+    if(pthread_join(open_thread, NULL)) {
+        SNDERR("failed to join unblocking thread");
+        close(fifo_snoop_fd);
+        fifo_snoop_fd = 0;
+        return -1;
+    }
+
+    if (fcntl(fifo_snoop_fd, F_SETFL, O_NONBLOCK) != 0) {
+        SNDERR("cannot set non-block to snoop fifo");
+        close(fifo_snoop_fd);
+        fifo_snoop_fd = 0;
+        return -1;
+    };
+
+    if (fcntl(fifo_snoop_fd, F_SETPIPE_SZ, 8192) != 8192) {
+        SNDERR("cannot set size of snoop fifo");
+        close(fifo_snoop_fd);
+        fifo_snoop_fd = 0;
+        return -1;
+    };
+
+    return 0;
+}
+
+int pcm_create_snoop_fifo_in(snd_pcm_t *pcm)
+{
+    char *fifo_in = "/tmp/audio_in_fifo";
+    pthread_t open_in_thread, read_thread;
+
+    if (mkfifo(fifo_in, 0666) < 0) {
+        if (errno != EEXIST) {
+            SNDERR("cannot create snoop fifo");
+            return -1;
+        }
+    }
+
+    if(pthread_create(&open_in_thread, NULL, fifo_open_w_thread, (void *) fifo_in)) {
+        SNDERR("error creating thread\n");
+        return -1;
+    }
+
+    fifo_snoop_fd_in = open(fifo_in, O_RDONLY);
+    if (fifo_snoop_fd_in <= 0) {
+        SNDERR("cannot open snoop fifo");
+        return -1;
+    }
+
+    if(pthread_join(open_in_thread, NULL)) {
+        SNDERR("failed to join unblocking thread");
+        close(fifo_snoop_fd_in);
+        fifo_snoop_fd_in = 0;
+        return -1;
+    }
+
+    if(pthread_create(&read_thread, NULL, fifo_read_thread, (void *) pcm)) {
+        SNDERR("error creating thread\n");
+        return -1;
+    }
+
+    if (fcntl(fifo_snoop_fd_in, F_SETPIPE_SZ, 8192) != 8192) {
+        SNDERR("cannot set size of snoop fifo");
+        close(fifo_snoop_fd_in);
+        fifo_snoop_fd_in = 0;
+        return -1;
+    };
+
+    return 0;
+}
+
+int pcm_write_snoop_fifo(snd_pcm_t *pcm, void *data, unsigned int frames)
+{
+    // Assume S16_LE
+    unsigned int bytes = snd_pcm_frames_to_bytes(pcm, frames);
+    if (bytes != 2 * frames) return 0;
+    if (bytes > 2048) return 0;
+
+    int i;
+    u_int16_t *buf_ptr;
+    u_int32_t *pcm_ptr;
+
+    if (fifo_snoop_fd <= 0) {
+        SNDERR("snoop fifo is not opened");
+        return -1;
+    }
+
+#ifdef FIFO_CONVERT_TO_8KHZ
+    buf_ptr = (u_int16_t *) fifo_buf;
+    pcm_ptr = (u_int32_t *) data;
+    for (i = 0; i < frames; i++) {
+        buf_ptr[i] = *pcm_ptr & 0xffff;
+        pcm_ptr++;
+    }
+
+    if (write(fifo_snoop_fd, fifo_buf, bytes / 2) < 0) {
+#else
+    if (write(fifo_snoop_fd, data, bytes) < 0) {
+#endif
+        if (errno == EAGAIN || errno == EWOULDBLOCK) {
+            SNDERR("Fifo full!\n");
+            return -2;
+        }
+    }
+    return 0;
+}
+
+int pcm_read_snoop_fifo(snd_pcm_t *pcm, void *data, unsigned int bytes)
+{
+    int count;
+
+    if (fifo_snoop_fd_in <= 0) {
+        SNDERR("snoop fifo is not opened");
+        return -1;
+    }
+
+    count = read(fifo_snoop_fd_in, data, bytes);
+
+    return count;
+}
diff -Naur alsa-lib-1.1.4.1.ori/src/pcm/pcm_fifo.h alsa-lib-1.1.4.1/src/pcm/pcm_fifo.h
--- alsa-lib-1.1.4.1.ori/src/pcm/pcm_fifo.h	1970-01-01 01:00:00.000000000 +0100
+++ alsa-lib-1.1.4.1/src/pcm/pcm_fifo.h	2021-04-12 22:21:19.000000000 +0200
@@ -0,0 +1,6 @@
+#define FIFO_BUFFER_SIZE 2048
+
+int pcm_create_snoop_fifo(snd_pcm_t *pcm);
+int pcm_create_snoop_fifo_in(snd_pcm_t *pcm);
+int pcm_write_snoop_fifo(snd_pcm_t *pcm, void *data, unsigned int frames);
+int pcm_read_snoop_fifo(snd_pcm_t *pcm, void *data, unsigned int bytes);
